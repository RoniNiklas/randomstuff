const CSV_DELIMITER = ';'; // depends on the user's OS settings on whether it should be a comma or a semi-colon. Can't really be detected via browser.

function initExcelButtons(buttonText) {
    $('table').not('.datepicker-grid').each(function () {
        const table = this;
        const fileNamePrefix = parseFileNamePrefix();

        const dropdown = createElement('div', '', 'dropdown')
        const dropdownList = createElement('div', '', 'dropdown-menu')
        const dropdownBtn = createElement('button', buttonText, 'excel-dropdown-toggle dropdown-toggle');
        dropdownBtn.dataset.toggle = 'dropdown';
        const csvBtn = createElement('button', 'CSV', 'dropdown-item');
        const xlsBtn = createElement('button', 'XLSX', 'dropdown-item');

        $(table).before(dropdown);
        $(dropdown).append(dropdownBtn);
        $(dropdown).append(dropdownList);
        $(dropdownList).append(csvBtn);
        $(dropdownList).append(xlsBtn);

        $(dropdownBtn).click((event) => {
            event.preventDefault();
        });

        $(csvBtn).click((event) => {
            event.preventDefault();
            csvExportOnClick(table, fileNamePrefix);
        });

        $(xlsBtn).click((event) => {
            event.preventDefault();
            xlsxExportOnClick(table, fileNamePrefix);
        });
    });
}

function createElement(type, innerText, className) {
    const element = document.createElement(type);
    element.innerText = innerText;
    element.className = className;
    return element;
}

function parseFileNamePrefix() {
    var fileNamePrefix = $('main').find('h1, h2, h3').first().text().trim();
    if ($('main').find('#details-content')[0]) {
        var extraText = $('#details-content').find('legend, h2').first().text();
        return fileNamePrefix + ' ' + extraText;
    }
    return fileNamePrefix;
}

function csvExportOnClick(table, fileNamePrefix) {
    const copy = copyAndFormatTable(table);
    saveFile(parseCSVContent(copy), parseFileNameWithDateTime(fileNamePrefix, '.csv'));
}

function xlsxExportOnClick(table, fileNamePrefix) {
    const copy = copyAndFormatTable(table);
    saveFile(parseXLSContent(copy), parseFileNameWithDateTime(fileNamePrefix, '.xlsx'));
}

function copyAndFormatTable(table) {
    const copy = table.cloneNode(true);
    // remove delete and select columns
    var rows = copy.rows;
    for (var i = 0; i < rows[0].cells.length; i++) {
        // Getting the column header's classname;
        var header = rows[0].cells[i].className;
        // Remove select- and remove-columns 
        if (header.includes('select-column') || header.includes('remove-column')) {
            for (var j = 0; j < rows.length; j++) {
                // Deleting the ith cell of each row 
                rows[j].deleteCell(i);
            }
        }
    }
    // Remove the detail-divs from details-summary cells, since multiline isn't supported well by the xlsx library.
    copy.innerHTML = copy.innerHTML.replace(/(<\/summary>)((.|\n)*?)(?=<\/details>)/gm, '');
    return copy;
}

function parseCSVContent(table) {
    var content = [];
    var rows = table.querySelectorAll('tr');

    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll('td, th');
        for (var j = 0; j < cols.length; j++) {
            var cellText = '"' + cols[j].innerText.trim() + ' "';
            row.push(cellText);
        }

        content.push(row.join(CSV_DELIMITER));
    }

    content = content.join('\n')

    return new Blob(['\uFEFF' + content], {
        type: 'text/csv; charset=utf-18'
    });
}

function parseXLSContent(table) {
    const maxColumnWidth = 30;
    const wb = XLSX.utils.table_to_book(table);
    const sheet = wb.Sheets['Sheet1'];
    const cells = Object.keys(sheet);
    const cols = {};
    cells.forEach(cell => {
        // Insert an empty whitespace string into cells with no data to stop other cells from overflowing into it in excel
        const cellValue = sheet[cell].v + ' ';
        sheet[cell].v = cellValue;
        sheet[cell].t = sheet[cell].t
            ? 's'
            : undefined;
        // Expand column widths based on the content width up to maxColumnWidth
        const currentColumn = cell.substring(0, cell.search(/\d/));
        if (currentColumn) {
            const oldColumnWidth = cols[currentColumn]
                ? cols[currentColumn].columnWidth
                : 0;
            const columnWidth = Math.min(maxColumnWidth, Math.max(oldColumnWidth, cellValue.length));
            cols[currentColumn] = { columnWidth };
        };
    });
    // insert column widths
    sheet['!cols'] = Object.values(cols).map(v => {
        return { wch: v.columnWidth };
    });

    const wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' });
    return new Blob([wbout], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    });
}


function parseFileNameWithDateTime(fileNamePrefix, nameSuffix) {
    return fileNamePrefix + " " + formatTimeString() + nameSuffix;
}

function formatTimeString() {
    let d = new Date();
    d = ['0' + d.getDate(),
    '0' + (d.getMonth() + 1),
    '' + d.getFullYear(),
    '0' + d.getHours(),
    '0' + d.getMinutes()
    ].map(component => component.slice(-2));
    return d.slice(0, 3).join('.') + ' ' + d.slice(3).join('.');
}

function saveFile(blob, fileName) {
    if (window.navigator.msSaveBlob) {
        navigator.msSaveBlob(blob, fileName);
    } else {
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
        link.remove();
        URL.revokeObjectURL(blob);
    }
}

const CSV_DELIMITER = ';'; // depends on the user's OS settings on whether it should be a comma or a semi-colon. Can't really be detected via browser.

function initExcelButtons(buttonText) {
    $('table').not('.datepicker-grid').each(function () {
        const table = this;
        const fileNamePrefix = parseFileNamePrefix();

        const dropdown = createElement('div', '', 'dropdown')
        const dropdownList = createElement('div', '', 'dropdown-menu')
        const dropdownBtn = createElement('button', buttonText, 'excel-dropdown-toggle dropdown-toggle');
        dropdownBtn.dataset.toggle = 'dropdown';
        const csvBtn = createElement('button', 'CSV', 'dropdown-item');
        const xlsBtn = createElement('button', 'XLS', 'dropdown-item');

        $(table).before(dropdown);
        $(dropdown).append(dropdownBtn);
        $(dropdown).append(dropdownList);
        $(dropdownList).append(csvBtn);
        $(dropdownList).append(xlsBtn);

        $(dropdownBtn).click((event) => {
            event.preventDefault();
        });

        $(csvBtn).click((event) => {
            event.preventDefault();
            csvExportOnClick(table, fileNamePrefix);
        });

        $(xlsBtn).click((event) => {
            event.preventDefault();
            xlsExportOnClick(table, fileNamePrefix);
        });
    });
}

function createElement(type, innerText, className) {
    const btn = document.createElement(type);
    btn.innerText = innerText;
    btn.className = className;
    return btn;
}

function parseFileNamePrefix() {
    var fileNamePrefix = $('main').find('h1, h2, h3').first().text().trim();
    if ($('main').find('#details-content')[0]) {
        var extraText = $('#details-content').find('legend, h2').first().text();
        return fileNamePrefix + ' ' + extraText;
    }
    return fileNamePrefix;
}

function csvExportOnClick(table, fileNamePrefix) {
    saveFile(parseCSVContent(table), parseFileNameWithDateTime(fileNamePrefix, '.csv'));
}

function xlsExportOnClick(table, fileNamePrefix) {
    saveFile(parseXLSContent(table, fileNamePrefix), parseFileNameWithDateTime(fileNamePrefix, '.xls'));
}

function parseCSVContent(table) {
    var content = [];
    var rows = table.querySelectorAll("tr");

    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll("td, th");

        for (var j = 0; j < cols.length; j++) {
            var cellText = '"' + cols[j].innerText + ' "';
            row.push(cellText);
        }
        content.push(row.join(CSV_DELIMITER));
    }
    content = content.join("\n")
    return new Blob(["\uFEFF" + content], {
        type: 'text/csv; charset=utf-18'
    });
}

function parseXLSContent(table, fileNamePrefix) {
    var innerHTML = formatTableContents(table.innerHTML);
    var content = '<html xmlns:x="urn:schemas-microsoft-com:office:excel">';
    content += '<head><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet>';
    content += `<x:Name>${fileNamePrefix}</x:Name>`;
    content += '<x:WorksheetOptions><x:Panes></x:Panes></x:WorksheetOptions></x:ExcelWorksheet>';
    content += '</x:ExcelWorksheets></x:ExcelWorkbook></xml></head><body>';
    content += "<table border='1px'>";
    content += innerHTML;
    content += '</table></body></html>';
    return new Blob(["\uFEFF" + content], {
        type: 'data:application/vnd.ms-excel; charset=utf-18'
    });
}

function formatTableContents(innerHTML) {
    // remove links
    // innerHTML = innerHTML.replace(/<\/{0,1}a(.*?)>/gm, '');
    // or make links work
    var port = location.port ? ':' + location.port : ''
    var linkPrefix = location.protocol + location.hostname + port;
    innerHTML = innerHTML.replace(/href="/gm, 'href="' + linkPrefix);
    return innerHTML;
}

function parseFileNameWithDateTime(namePrefix, nameSuffix) {
    return namePrefix + " " + formatTimeString() + nameSuffix;
}

function formatTimeString() {
    let d = new Date();
    d = ['0' + d.getDate(),
    '0' + (d.getMonth() + 1),
    '' + d.getFullYear(),
    '0' + d.getHours(),
    '0' + d.getMinutes()
    ].map(component => component.slice(-2));
    return d.slice(0, 3).join('.') + ' ' + d.slice(3).join('.');
}

function saveFile(blob, fileName) {
    if (window.navigator.msSaveBlob) {
        navigator.msSaveBlob(blob, fileName);
    } else {
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
        link.remove();
        URL.revokeObjectURL(blob);
    }
}

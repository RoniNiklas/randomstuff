##Post-content stuff  
missing internal object properties: https://stackoverflow.com/questions/5932580/how-to-determine-if-a-object-type-is-a-built-in-system-type
missing prefix handling for a more complex recursion of objects
##Working  
    public static class PostContentHelper {
        public static void PopulatePostContent(Dictionary<string, string> postContent, object obj, string? prefix = null) {
            foreach (var propertyInfo in obj.GetType().GetProperties()) {
                var prop = propertyInfo.GetValue(obj);
                var list = prop as IList;
                if (list != null && propertyInfo.PropertyType.IsGenericType) {
                    for (var i = 0; i < list.Count; i++) {
                        PopulatePostContent(postContent, list[i], propertyInfo.Name + "[" + i.ToString() + "]");
                    }
                }
                else {
                    postContent.Add(ParseKeyString(propertyInfo.Name, prefix), ParseValueString(prop));
                }
            }
        }

        private static string ParseKeyString(string name, string? prefix = null) {
            prefix = string.IsNullOrWhiteSpace(prefix) ? "" : prefix + ".";
            return prefix + name;
        }

        private static string ParseValueString(object? value) {
            var date = value as DateTime?;
            if (date != null) {
                return date?.ToString("G", CultureInfo.CreateSpecificCulture("en-US"));
            }
            else {
                return value?.ToString();
            }
        }
    }
        
Untested  
        public static void PopulatePostContent(Dictionary<string, string> postContent, List<ExpandoObject> objects, string? prefixInput = null) {
            foreach (var (obj, index) in objects.Select((value, index) => (value, index))) {
                foreach (var property in obj) {
                    postContent.Add(ParsePrefixString(property.Key, prefixInput, index), ParsePropertyString(property.Value));
                }
            }
        }
##ASSERT STUFF  
        public static void AssertMatch(ExpandoObject expected, object provided, List<string> ignoredFields) {
            foreach (var property in expected) {
                if (!ignoredFields.Contains(property.Key)) {
                    var expectedValue = property.Value;
                    var providedValue = provided.GetType().GetProperty(property.Key).GetValue(provided);
                    Assert.Equal(expectedValue, providedValue);
                }
            }
        }

        public static void AssertMatch(object expected, object provided) {
            foreach (var propertyInfo in expected.GetType().GetProperties()) {
                var expectedValue = expected.GetType().GetProperty(propertyInfo.Name).GetValue(expected);
                var providedValue = provided.GetType().GetProperty(propertyInfo.Name).GetValue(provided);
                Assert.Equal(expectedValue, providedValue);
            }
        }

        public static void AssertMatch(object expected, object provided, List<string> ignoredFields) {
            foreach (var propertyInfo in expected.GetType().GetProperties()) {
                if (!ignoredFields.Contains(propertyInfo.Name)) {
                    var expectedValue = expected.GetType().GetProperty(propertyInfo.Name).GetValue(expected);
                    var providedValue = provided.GetType().GetProperty(propertyInfo.Name).GetValue(provided);
                    Assert.Equal(expectedValue, providedValue);
                }
            }
        }
